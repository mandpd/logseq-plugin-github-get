import axios from "axios";
import "@logseq/libs";

const decode = (str: string): string =>
  Buffer.from(str, "base64").toString("binary");
const contents = "/contents/";
let commit_id = "";
let commit_message = "";

export interface CodeType {
  ext: string;
  type: string;
}
/**
 * Extensions that correspond to the supported file types - autogenerated from CodeMirror modeInfo
 **/
const CodeTypes = [
  {
    ext: "dyalog",
    type: "apl",
  },
  {
    ext: "apl",
    type: "apl",
  },
  {
    ext: "asc",
    type: "asciiarmor",
  },
  {
    ext: "pgp",
    type: "asciiarmor",
  },
  {
    ext: "sig",
    type: "asciiarmor",
  },
  {
    ext: "asn",
    type: "asn.1",
  },
  {
    ext: "asn1",
    type: "asn.1",
  },
  {
    ext: "b",
    type: "brainfuck",
  },
  {
    ext: "bf",
    type: "brainfuck",
  },
  {
    ext: "c",
    type: "clike",
  },
  {
    ext: "h",
    type: "clike",
  },
  {
    ext: "ino",
    type: "clike",
  },
  {
    ext: "cpp",
    type: "clike",
  },
  {
    ext: "c++",
    type: "clike",
  },
  {
    ext: "cc",
    type: "clike",
  },
  {
    ext: "cxx",
    type: "clike",
  },
  {
    ext: "hpp",
    type: "clike",
  },
  {
    ext: "h++",
    type: "clike",
  },
  {
    ext: "hh",
    type: "clike",
  },
  {
    ext: "hxx",
    type: "clike",
  },
  {
    ext: "cob",
    type: "cobol",
  },
  {
    ext: "cpy",
    type: "cobol",
  },
  {
    ext: "cbl",
    type: "cobol",
  },
  {
    ext: "cs",
    type: "clike",
  },
  {
    ext: "clj",
    type: "clojure",
  },
  {
    ext: "cljc",
    type: "clojure",
  },
  {
    ext: "cljx",
    type: "clojure",
  },
  {
    ext: "cljs",
    type: "clojure",
  },
  {
    ext: "gss",
    type: "css",
  },
  {
    ext: "cmake",
    type: "cmake",
  },
  {
    ext: "cmake.in",
    type: "cmake",
  },
  {
    ext: "coffee",
    type: "coffeescript",
  },
  {
    ext: "cl",
    type: "commonlisp",
  },
  {
    ext: "lisp",
    type: "commonlisp",
  },
  {
    ext: "el",
    type: "commonlisp",
  },
  {
    ext: "cyp",
    type: "cypher",
  },
  {
    ext: "cypher",
    type: "cypher",
  },
  {
    ext: "pyx",
    type: "python",
  },
  {
    ext: "pxd",
    type: "python",
  },
  {
    ext: "pxi",
    type: "python",
  },
  {
    ext: "cr",
    type: "crystal",
  },
  {
    ext: "css",
    type: "css",
  },
  {
    ext: "cql",
    type: "sql",
  },
  {
    ext: "d",
    type: "d",
  },
  {
    ext: "dart",
    type: "dart",
  },
  {
    ext: "diff",
    type: "diff",
  },
  {
    ext: "patch",
    type: "diff",
  },
  {
    ext: "dtd",
    type: "dtd",
  },
  {
    ext: "dylan",
    type: "dylan",
  },
  {
    ext: "dyl",
    type: "dylan",
  },
  {
    ext: "intr",
    type: "dylan",
  },
  {
    ext: "ecl",
    type: "ecl",
  },
  {
    ext: "edn",
    type: "clojure",
  },
  {
    ext: "e",
    type: "eiffel",
  },
  {
    ext: "elm",
    type: "elm",
  },
  {
    ext: "ejs",
    type: "htmlembedded",
  },
  {
    ext: "erb",
    type: "htmlembedded",
  },
  {
    ext: "erl",
    type: "erlang",
  },
  {
    ext: "factor",
    type: "factor",
  },
  {
    ext: "forth",
    type: "forth",
  },
  {
    ext: "fth",
    type: "forth",
  },
  {
    ext: "4th",
    type: "forth",
  },
  {
    ext: "f",
    type: "fortran",
  },
  {
    ext: "for",
    type: "fortran",
  },
  {
    ext: "f77",
    type: "fortran",
  },
  {
    ext: "f90",
    type: "fortran",
  },
  {
    ext: "f95",
    type: "fortran",
  },
  {
    ext: "fs",
    type: "mllike",
  },
  {
    ext: "s",
    type: "gas",
  },
  {
    ext: "feature",
    type: "gherkin",
  },
  {
    ext: "go",
    type: "go",
  },
  {
    ext: "groovy",
    type: "groovy",
  },
  {
    ext: "gradle",
    type: "groovy",
  },
  {
    ext: "haml",
    type: "haml",
  },
  {
    ext: "hs",
    type: "haskell",
  },
  {
    ext: "lhs",
    type: "haskell-literate",
  },
  {
    ext: "hx",
    type: "haxe",
  },
  {
    ext: "hxml",
    type: "haxe",
  },
  {
    ext: "aspx",
    type: "htmlembedded",
  },
  {
    ext: "html",
    type: "htmlmixed",
  },
  {
    ext: "htm",
    type: "htmlmixed",
  },
  {
    ext: "handlebars",
    type: "htmlmixed",
  },
  {
    ext: "hbs",
    type: "htmlmixed",
  },
  {
    ext: "pro",
    type: "idl",
  },
  {
    ext: "jade",
    type: "pug",
  },
  {
    ext: "pug",
    type: "pug",
  },
  {
    ext: "java",
    type: "clike",
  },
  {
    ext: "jsp",
    type: "htmlembedded",
  },
  {
    ext: "js",
    type: "javascript",
  },
  {
    ext: "json",
    type: "javascript",
  },
  {
    ext: "map",
    type: "javascript",
  },
  {
    ext: "jsonld",
    type: "javascript",
  },
  {
    ext: "jsx",
    type: "jsx",
  },
  {
    ext: "j2",
    type: "jinja2",
  },
  {
    ext: "jinja",
    type: "jinja2",
  },
  {
    ext: "jinja2",
    type: "jinja2",
  },
  {
    ext: "jl",
    type: "julia",
  },
  {
    ext: "kt",
    type: "clike",
  },
  {
    ext: "less",
    type: "css",
  },
  {
    ext: "ls",
    type: "livescript",
  },
  {
    ext: "lua",
    type: "lua",
  },
  {
    ext: "markdown",
    type: "markdown",
  },
  {
    ext: "md",
    type: "markdown",
  },
  {
    ext: "mkd",
    type: "markdown",
  },
  {
    ext: "m",
    type: "mathematica",
  },
  {
    ext: "nb",
    type: "mathematica",
  },
  {
    ext: "wl",
    type: "mathematica",
  },
  {
    ext: "wls",
    type: "mathematica",
  },
  {
    ext: "mo",
    type: "modelica",
  },
  {
    ext: "mps",
    type: "mumps",
  },
  {
    ext: "mbox",
    type: "mbox",
  },
  {
    ext: "nsh",
    type: "nsis",
  },
  {
    ext: "nsi",
    type: "nsis",
  },
  {
    ext: "nt",
    type: "ntriples",
  },
  {
    ext: "nq",
    type: "ntriples",
  },
  {
    ext: "m",
    type: "clike",
  },
  {
    ext: "mm",
    type: "clike",
  },
  {
    ext: "ml",
    type: "mllike",
  },
  {
    ext: "mli",
    type: "mllike",
  },
  {
    ext: "mll",
    type: "mllike",
  },
  {
    ext: "mly",
    type: "mllike",
  },
  {
    ext: "m",
    type: "octave",
  },
  {
    ext: "oz",
    type: "oz",
  },
  {
    ext: "p",
    type: "pascal",
  },
  {
    ext: "pas",
    type: "pascal",
  },
  {
    ext: "jsonld",
    type: "pegjs",
  },
  {
    ext: "pl",
    type: "perl",
  },
  {
    ext: "pm",
    type: "perl",
  },
  {
    ext: "php",
    type: "php",
  },
  {
    ext: "php3",
    type: "php",
  },
  {
    ext: "php4",
    type: "php",
  },
  {
    ext: "php5",
    type: "php",
  },
  {
    ext: "php7",
    type: "php",
  },
  {
    ext: "phtml",
    type: "php",
  },
  {
    ext: "pig",
    type: "pig",
  },
  {
    ext: "txt",
    type: "null",
  },
  {
    ext: "text",
    type: "null",
  },
  {
    ext: "conf",
    type: "null",
  },
  {
    ext: "def",
    type: "null",
  },
  {
    ext: "list",
    type: "null",
  },
  {
    ext: "log",
    type: "null",
  },
  {
    ext: "pls",
    type: "sql",
  },
  {
    ext: "ps1",
    type: "powershell",
  },
  {
    ext: "psd1",
    type: "powershell",
  },
  {
    ext: "psm1",
    type: "powershell",
  },
  {
    ext: "properties",
    type: "properties",
  },
  {
    ext: "ini",
    type: "properties",
  },
  {
    ext: "in",
    type: "properties",
  },
  {
    ext: "proto",
    type: "protobuf",
  },
  {
    ext: "BUILD",
    type: "python",
  },
  {
    ext: "bzl",
    type: "python",
  },
  {
    ext: "py",
    type: "python",
  },
  {
    ext: "pyw",
    type: "python",
  },
  {
    ext: "pp",
    type: "puppet",
  },
  {
    ext: "q",
    type: "q",
  },
  {
    ext: "r",
    type: "r",
  },
  {
    ext: "R",
    type: "r",
  },
  {
    ext: "rst",
    type: "rst",
  },
  {
    ext: "spec",
    type: "rpm",
  },
  {
    ext: "rb",
    type: "ruby",
  },
  {
    ext: "rs",
    type: "rust",
  },
  {
    ext: "sas",
    type: "sas",
  },
  {
    ext: "sass",
    type: "sass",
  },
  {
    ext: "scala",
    type: "clike",
  },
  {
    ext: "scm",
    type: "scheme",
  },
  {
    ext: "ss",
    type: "scheme",
  },
  {
    ext: "scss",
    type: "css",
  },
  {
    ext: "sh",
    type: "shell",
  },
  {
    ext: "ksh",
    type: "shell",
  },
  {
    ext: "bash",
    type: "shell",
  },
  {
    ext: "siv",
    type: "sieve",
  },
  {
    ext: "sieve",
    type: "sieve",
  },
  {
    ext: "slim",
    type: "slim",
  },
  {
    ext: "st",
    type: "smalltalk",
  },
  {
    ext: "tpl",
    type: "smarty",
  },
  {
    ext: "sml",
    type: "mllike",
  },
  {
    ext: "sig",
    type: "mllike",
  },
  {
    ext: "fun",
    type: "mllike",
  },
  {
    ext: "smackspec",
    type: "mllike",
  },
  {
    ext: "soy",
    type: "soy",
  },
  {
    ext: "rq",
    type: "sparql",
  },
  {
    ext: "sparql",
    type: "sparql",
  },
  {
    ext: "sql",
    type: "sql",
  },
  {
    ext: "nut",
    type: "clike",
  },
  {
    ext: "styl",
    type: "stylus",
  },
  {
    ext: "swift",
    type: "swift",
  },
  {
    ext: "text",
    type: "stex",
  },
  {
    ext: "ltx",
    type: "stex",
  },
  {
    ext: "tex",
    type: "stex",
  },
  {
    ext: "v",
    type: "verilog",
  },
  {
    ext: "sv",
    type: "verilog",
  },
  {
    ext: "svh",
    type: "verilog",
  },
  {
    ext: "tcl",
    type: "tcl",
  },
  {
    ext: "textile",
    type: "textile",
  },
  {
    ext: "toml",
    type: "toml",
  },
  {
    ext: "1",
    type: "troff",
  },
  {
    ext: "2",
    type: "troff",
  },
  {
    ext: "3",
    type: "troff",
  },
  {
    ext: "4",
    type: "troff",
  },
  {
    ext: "5",
    type: "troff",
  },
  {
    ext: "6",
    type: "troff",
  },
  {
    ext: "7",
    type: "troff",
  },
  {
    ext: "8",
    type: "troff",
  },
  {
    ext: "9",
    type: "troff",
  },
  {
    ext: "ttcn",
    type: "ttcn",
  },
  {
    ext: "ttcn3",
    type: "ttcn",
  },
  {
    ext: "ttcnpp",
    type: "ttcn",
  },
  {
    ext: "cfg",
    type: "ttcn-cfg",
  },
  {
    ext: "ttl",
    type: "turtle",
  },
  {
    ext: "ts",
    type: "javascript",
  },
  {
    ext: "tsx",
    type: "jsx",
  },
  {
    ext: "webidl",
    type: "webidl",
  },
  {
    ext: "vb",
    type: "vb",
  },
  {
    ext: "vbs",
    type: "vbscript",
  },
  {
    ext: "vtl",
    type: "velocity",
  },
  {
    ext: "v",
    type: "verilog",
  },
  {
    ext: "vhd",
    type: "vhdl",
  },
  {
    ext: "vhdl",
    type: "vhdl",
  },
  {
    ext: "vue",
    type: "vue",
  },
  {
    ext: "xml",
    type: "xml",
  },
  {
    ext: "xsl",
    type: "xml",
  },
  {
    ext: "xsd",
    type: "xml",
  },
  {
    ext: "svg",
    type: "xml",
  },
  {
    ext: "xy",
    type: "xquery",
  },
  {
    ext: "xquery",
    type: "xquery",
  },
  {
    ext: "ys",
    type: "yacas",
  },
  {
    ext: "yaml",
    type: "yaml",
  },
  {
    ext: "yml",
    type: "yaml",
  },
  {
    ext: "z80",
    type: "z80",
  },
  {
    ext: "mscgen",
    type: "mscgen",
  },
  {
    ext: "mscin",
    type: "mscgen",
  },
  {
    ext: "msc",
    type: "mscgen",
  },
  {
    ext: "xu",
    type: "mscgen",
  },
  {
    ext: "msgenny",
    type: "mscgen",
  },
  {
    ext: "wat",
    type: "wast",
  },
  {
    ext: "wast",
    type: "wast",
  },
];

/**
 * Internal structure for passing code file contents
 */
interface CodeFile {
  content: string;
  type: string | undefined;
  commit_id?: string;
  commit_message?: string;
}

interface CommitListEntry {
  id: string;
  date: Date;
  message: string;
}

interface RepoListEntry {
  name: string;
  description: string;
}

let repoCommitsList: {
  account: string;
  repo: string;
  commits: CommitListEntry[];
}[] = [];

export const parseFilePath = (filePath: string): string[] => {
  let account = logseq!.settings!.githubAccount
    ? logseq!.settings!.githubAccount
    : "";
  let repo = logseq!.settings!.githubRepo ? logseq!.settings!.githubRepo : "";

  // Parse filepath for Github account name
  let parts = filePath.split("::");
  if (parts.length == 2) {
    // Parse the path for the account name
    account = parts[0];
    filePath = parts[1];
  }

  // Parse filePath for repo name
  parts = filePath.split(":");
  if (parts.length == 2) {
    repo = parts[0];
    filePath = parts[1];
  }

  return [account, repo, filePath];
};

/**
 *
 * @param filePath
 * @returns Promise for the codefile structure for the requested file.
 *
 * Attempts to retrieve the requested file from VS code via the live server on port 5500.
 */

export async function getFile(filePath: string): Promise<CodeFile> {
  //Retrieve github settings
  const githubURL = "https://api.github.com/repos/";

  const token = logseq!.settings!.githubPat;
  try {
    let [account, repo, file] = parseFilePath(filePath);
    // Abort if no account provided
    if (account == "") {
      logseq.App.showMsg(
        `No GitHub account name provided and no default set.`,
        "error"
      );
      return {
        content: "No Github account name provided and do default set.",
        type: "error",
      };
    }

    // Abort if no repo provided
    if (repo == "") {
      logseq.App.showMsg(`No repository name provided.`, "error");
      return {
        content: "No repository name provided",
        type: "error",
      };
    }

    await getCommits(account, repo, file);

    // Update commit_id to latest commit
    const repoCommits = repoCommitsList.find((rcl) => {
      return rcl.repo == repo && rcl.account == account;
    })?.commits;
    const latestRepo = repoCommits!.sort(
      (a, b) => b.date.getMilliseconds() - a.date.getMilliseconds()
    )[0];
    commit_id = latestRepo?.id;
    commit_message = latestRepo?.message;

    const endpoint =
      githubURL + account + "/" + repo + contents + file + "?ref=" + commit_id;
    let bits = file.split(".");

    let response = await axios.get(endpoint, {
      headers: {
        Authorization: `token ${token}`,
      },
    });

    let fileType: string = bits.length > 1 ? bits[bits.length - 1] : "txt"; // Set files with no extension to extension txt.

    // Look for type
    let codeType = CodeTypes.find((c) => {
      return c.ext == fileType;
    });

    if (codeType == undefined) codeType = { ext: "unknown", type: "null" };

    let myText = decode(response.data.content);
    myText.replace(/\n/g, "\r");
    return {
      content: myText,
      type: codeType.type == "null" ? "" : codeType.type, // Set files with unknown extension to extension txt
      commit_id: commit_id,
      commit_message: commit_message,
    };
  } catch (err) {
    if ((err.message = "Failed to fetch")) {
      logseq.App.showMsg(
        `The file was not found. Github is case sensitive so check the case of the path you provided.`,
        "error"
      );
      return {
        content: err.message,
        type: "error",
      };
    } else {
      logseq.App.showMsg(`error is ${err.message}`, "error");
      return {
        content: err.message,
        type: "error",
      };
    }
  }
}

export async function getRepos(): Promise<RepoListEntry[]> {
  //Retrieve github settings
  const endpoint = "https://api.github.com/user/repos?per_page=100";
  const token = logseq!.settings!.githubPat;

  let response = await axios.get(endpoint, {
    headers: {
      Authorization: `token ${token}`,
    },
  });
  const repoList: RepoListEntry[] = [];
  response.data.forEach((repo) => {
    repoList.push({
      name: repo.name,
      description: repo.description,
    });
  });
  return repoList;
}

export async function getCommits(
  account: string,
  repo: string,
  file: string
): Promise<void> {
  //Retrieve github settings
  const githubURL = "https://api.github.com/repos/" + account + "/";
  const token = logseq!.settings!.githubPat;

  // Check if the commit list already exists
  let arIndex = repoCommitsList.findIndex((a) => {
    return a.repo == repo && a.account == account;
  });

  //Update commit list
  const endpoint = githubURL + repo + "/commits";

  let response = await axios.get(endpoint, {
    headers: {
      Authorization: `token ${token}`,
    },
  });
  const commitList: {
    account: string;
    repo: string;
    commits: CommitListEntry[];
  } = {
    account: account,
    repo: repo,
    commits: [],
  };
  response.data.forEach((commit) => {
    commitList.commits.push({
      message: commit.commit.message.replace(/\n/g, " ").replace(/\r/g, " "),
      date: new Date(commit.commit.author.date),
      id: commit.url.split("/").pop(),
    });
  });
  // Add or Update
  if (arIndex >= 0) {
    repoCommitsList[arIndex] = commitList;
  } else {
    repoCommitsList.push(commitList);
  }

  return;
}
